import funcy
import terminal

def generator(grammar, step_fn, extractor_fn, depth):
    """
    `generator` is a higher order function. This function starts generating strings from the terminal symbol in
    the grammar. It returns two values, a final group of strings that will done when we have reached the final evaluation depth
    and another group of strings that are extracted during iteration by the extractor_fn predicate.

    grammar -- Grammar object
    strings -- list of strings generated by previous production step
    step_fn -- takes a list of productions and a list of strings and generates
               a new group of strings to use in future productions
    extractor_fn -- Predicate: takes a string as an argument and if it returns
                    we add it to the list of marked strings
    depth -- How many levels of productions must the simulation do?
    """
    extracted = []
    strings = [grammar.start_symbol]
    for current_depth in range(0, depth):
        extracted += filter(strings, extractor_fn)
        strings = step_fn(grammar, strings)
    return strings, extracted

def all_terminal(string):
    return funcy.all(lambda str: str.__class__ == terminal.Terminal)
    
def randomised_step(grammar, strings):

def randomised_generation(grammar):
